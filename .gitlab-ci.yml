stages:
  - lint
  - test
  - build
  - release

variables:
  BUILD_IMAGE: $ARTIFACTORY_SERVER/sds/sdd-golang-common-ci
  BUILDER_IMAGE: $ARTIFACTORY_SERVER/sds/sdd-ubuntu-golang-builder-ci
  COMMON_IMAGE: $ARTIFACTORY_SERVER/sds/sdd-common-ci

include:
  - project: 'sds-dev/releases'
    ref: main
    file: 'releases.yml'

backend-lint:
  stage: lint
  image: $BUILD_IMAGE
  rules:
    # We don't run on tags and default branch
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
  tags:
    - docker-exec
  before_script:
    - pnpm install --dir frontend
    - pnpm run --dir frontend build
    - go mod tidy && go mod vendor
  script:
    - golangci-lint run -v ./... --allow-parallel-runners --timeout 10m --output.code-climate.path stdout | tee gl-code-quality-report.json
    - go fmt ./...
    - go vet -tags=fuse3 ./...
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

frontend-lint:
  stage: lint
  image: $COMMON_IMAGE
  rules:
    # We don't run on tags and default branch
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
  tags:
    - docker-exec
  before_script:
    - cd frontend
    - pnpm install
  script:
    - pnpm run lint

jfrog-go-audit:
  stage: test
  rules:
    # We don't run on tags and default branch
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
  tags:
    - sds
  script:
    # Update upstream package checksums in case they have changed
    - go mod vendor
    # Configure JFrog Artifactory repositories
    - jf config import "${JF_CONFIG}"
    - jf go-config --repo-resolve $ARTIFACTORY_SERVER
    # Audit Go project
    - jf audit --go --licenses --extended-table --min-severity=Medium

test:
  image: $BUILD_IMAGE
  stage: test
  rules:
    # We don't run on tags and default branch
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
  tags:
    - docker-exec
  services:
    - docker:dind
  before_script:
    - pnpm install --dir frontend
    - pnpm run --dir frontend build
    - go mod tidy && go mod vendor
  script:
    - CI=true go test -tags=fuse3 -v -coverprofile=coverage.txt -covermode=atomic $(go list ./... | grep -v frontend)

build-artifacts:
  stage: build
  image: $BUILDER_IMAGE
  rules :
    - if: '$CI_COMMIT_TAG !~ "/^$/"'
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
  tags:
    - docker-exec
  services:
    - docker:dind
  variables:
    SECURE_FILES_DOWNLOAD_PATH: './certs'
  before_script:
    - jf config import "${JF_CONFIG}"
    - pnpm install --dir frontend
    - pnpm run --dir frontend build
    - go mod tidy && go mod vendor
  script:
    - curl -sSf https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer | bash
    - |
      go build -ldflags '-w -s' -o data-gateway-cli-amd64-${CI_COMMIT_TAG:-devel} ./cmd/cli
      jf s --licenses data-gateway-cli-amd64-${CI_COMMIT_TAG:-devel} --repo-path ${ARTIFACTORY_SERVER_BINARY_REPO}
      jf rt u data-gateway-cli-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-cli-amd64-${CI_COMMIT_TAG:-devel}
      jf rt cp $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-cli-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_DESKTOP_BINARY_REPO/
    - |
      go build -ldflags '-w -s -X sda-filesystem/internal/api.Port=8283' -o data-gateway-cli-22-amd64-${CI_COMMIT_TAG:-devel} ./cmd/cli
      jf s --licenses data-gateway-cli-22-amd64-${CI_COMMIT_TAG:-devel} --repo-path ${ARTIFACTORY_SERVER_BINARY_REPO}
      jf rt u data-gateway-cli-22-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-cli-22-amd64-${CI_COMMIT_TAG:-devel}
      jf rt cp $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-cli-22-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_DESKTOP_BINARY_REPO/
    - |
      go install github.com/wailsapp/wails/v2/cmd/wails@latest
      /usr/local/go/bin/wails doctor
    - |
      cd cmd/gui
      /usr/local/go/bin/wails build -clean -upx -trimpath -s -tags webkit2_41
      cd ../..
      mv build/bin/data-gateway data-gateway-gui-amd64-${CI_COMMIT_TAG:-devel}
      jf s --licenses data-gateway-gui-amd64-${CI_COMMIT_TAG:-devel} --repo-path ${ARTIFACTORY_SERVER_BINARY_REPO}
      jf rt u data-gateway-gui-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-gui-amd64-${CI_COMMIT_TAG:-devel}
      jf rt cp $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-gui-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_DESKTOP_BINARY_REPO/
    - |
      cd cmd/gui
      /usr/local/go/bin/wails build -clean -upx -trimpath -s -ldflags "-X sda-filesystem/internal/api.Port=8283"
      cd ../..
      mv build/bin/data-gateway data-gateway-gui-22-amd64-${CI_COMMIT_TAG:-devel}
      jf s --licenses data-gateway-gui-22-amd64-${CI_COMMIT_TAG:-devel} --repo-path ${ARTIFACTORY_SERVER_BINARY_REPO}
      jf rt u data-gateway-gui-22-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-gui-22-amd64-${CI_COMMIT_TAG:-devel}
      jf rt cp $ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-gui-22-amd64-${CI_COMMIT_TAG:-devel} $ARTIFACTORY_SERVER_DESKTOP_BINARY_REPO/

release:
  extends: .automated-release

  release:
    description: $(cat release_changes.md)
    assets:
      links:
        - name: data-gateway-cli-amd64-${RELEASE_VERSION} (artifactory)
          url: https://$ARTIFACTORY_SERVER/artifactory/$ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-cli-amd64-${RELEASE_VERSION}
        - name: data-gateway-gui-amd64-${RELEASE_VERSION} (artifactory)
          url: https://$ARTIFACTORY_SERVER/artifactory/$ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-gui-amd64-${RELEASE_VERSION}
        - name: data-gateway-gui-22-amd64-${RELEASE_VERSION} (artifactory)
          url: https://$ARTIFACTORY_SERVER/artifactory/$ARTIFACTORY_SERVER_BINARY_REPO/$CI_PROJECT_NAME/data-gateway-gui-22-amd64-${RELEASE_VERSION}

# This is a manual dry-run for developers to run in the merge request
update-versions-dryrun:
  extends: .update-versions-dryrun
  variables:
    UPDATE_VERSION_FILES_LIST: "cmd/gui/wails.json;docs/linux-setup.md;frontend/package.json"

# This job updates the versions
update-versions:
  extends: .update-versions
  variables:
    UPDATE_VERSION_FILES_LIST: "cmd/gui/wails.json;docs/linux-setup.md;frontend/package.json"

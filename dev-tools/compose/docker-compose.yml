services:
  keystone-swift:
    image: ghcr.io/cscfi/docker-keystone-swift:latest
    container_name: keystone-swift
    env_file:
      - .env.keystone
    environment:
      S6_LOGGING: 0
    healthcheck:
      test: curl --fail http://127.0.0.1:5001/ || exit 1
      interval: 20s
      timeout: 20s
      retries: 5
      start_period: 20s
    profiles:
      - keystone
      - keystone-creds
    ports:
      - 8080:8080
      - 5001:5001

  mockauth:
    build:
      context: ../../
      dockerfile: dev-tools/containers/mockauth/Dockerfile
    image: mockauth
    container_name: mockauth
    env_file:
      - .env.keystone
    environment:
      SDS_ACCESS_TOKEN: "${SDS_ACCESS_TOKEN}"
      IS_FINDATA: "${IS_FINDATA}"
    profiles:
      - keystone
    depends_on:
      keystone-swift:
        condition: service_healthy

  admin-creds:
    image: docker.io/docker:28.3
    container_name: admin-creds
    entrypoint: sh /admin_credentials.sh
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../scripts/admin_credentials.sh:/admin_credentials.sh
      - .:/app/env
    profiles:
      - keystone
      - keystone-creds
    depends_on:
      keystone-swift:
        condition: service_healthy

  vault:
    image: docker.io/hashicorp/vault:1.20.1
    container_name: vault
    env_file:
      - .env.keystone
    environment:
      ARTIFACTORY_URL: "${ARTIFACTORY_URL}"
      ARTIFACTORY_TOKEN: "${ARTIFACTORY_TOKEN}"
    entrypoint: /vault/helpers/vault.sh
    volumes:
      - ../vault/helpers:/vault/helpers
    cap_add:
      - IPC_LOCK
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "--proxy",
          "off",
          "http://127.0.0.1:8200/v1/sys/health?standbyok=true"
        ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - 8200:8200
    profiles:
      - keystone
  vault-setup:
    image: docker.io/hashicorp/vault:1.20.1
    entrypoint: /vault/helpers/setup.sh
    container_name: vault-setup
    env_file:
      - .env.keystone
    volumes:
      - ../vault/helpers:/vault/helpers
    profiles:
      - keystone
    depends_on:
      vault:
        condition: service_healthy

  krakend:
    image: "${ARTIFACTORY_SERVER}/sds/krakend-api-gateway:2025.8.0"
    container_name: krakend
    env_file:
      - path: .env
      - path: .env.krakend
      - path: .env.admin
        required: false
    environment:
      API_KEY: "${KRAKEND_API_KEY}"
      KRAKEND_ADDR: "${VALIDATOR_ADDR}"
      AAI_BASE_URL: "${AAI_BASE_URL}"
      KEYSTONE_BASE_URL: "${KEYSTONE_BASE_URL}"
      S3_HOST: "${S3_HOST}"
      DISABLE_JWK_SECURITY: "${DISABLE_JWK_SECURITY}"
      C4GH_KEY: "${C4GH_KEY}"
      C4GH_KEY_PASSPHRASE: "${C4GH_KEY_PASSPHRASE}"
      FINDATA_S3_HOST: "${FINDATA_S3_HOST}"
      FINDATA_S3_REGION: "${FINDATA_S3_REGION}"
      FINDATA_BUCKET: "${FINDATA_BUCKET}"
      VAULT_ADDR: "${VAULT_ADDR}"
      VAULT_SECRET: "${VAULT_SECRET}"
      VAULT_ROLE: "${VAULT_ROLE}"
    healthcheck:
      test: curl --fail "http://127.0.0.1:8082/__health" || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ../static:/static
    profiles:
      - krakend
    depends_on:
      krakend-db:
        condition: service_healthy
    ports:
      - 8082:8082
  krakend-db:
    image: docker.io/postgres:17-alpine
    container_name: krakend-db
    env_file:
      - .env.krakend
    environment:
      DB_PROJECTS: "${CSC_PROJECT}:${EPOUTA_IP_ADDRESS}"
      SBDB_CONNECTION_STRING: "${SBDB_CONNECTION_STRING}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_USER} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-init:/docker-entrypoint-initdb.d
    profiles:
      - krakend
    depends_on:
      krakend-db-setup:
        condition: service_started
  krakend-db-setup:
    image: "${ARTIFACTORY_SERVER}/sds/krakend-test-databases:2025.8.0"
    container_name: krakend-db-setup
    volumes:
      - postgres-init:/docker-entrypoint-initdb.d
    profiles:
      - krakend

  data-upload:
    build:
      context: ../../
      dockerfile: dev-tools/containers/data-upload/Dockerfile
    image: data-upload
    container_name: data-upload
    env_file:
      - .env
      - .env.keystone
    profiles:
      - keystone
    depends_on:
      vault-setup:
        condition: service_completed_successfully
      mockauth:
        condition: service_started
      krakend:
        condition: service_started
      terminal-proxy:
        condition: service_started

  clamav:
    build:
      context: ../../
      dockerfile: dev-tools/containers/clamav/Dockerfile
      args:
        PROXY_URL: "${PROXY_URL}"
    image: clamav
    container_name: clamav
    healthcheck:
      test: ["CMD-SHELL", "echo PING | nc 127.0.0.1 3310 | grep -q PONG"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s
    profiles:
      - findata
    depends_on:
      krakend:
        condition: service_healthy
    ports:
      - 3310:3310

  terminal-proxy:
    image: docker.io/nginx:1.29
    container_name: terminal-proxy
    environment:
      KRAKEND_ADDR: "${KRAKEND_ADDR}"
      KRAKEND_API_KEY: "${KRAKEND_API_KEY}"
      EPOUTA_IP_ADDRESS: "${EPOUTA_IP_ADDRESS}"
      BACKEND_HOST: "${BACKEND_HOST}"
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: ".conf"
    volumes:
      - ../proxy:/etc/nginx/templates
    ports:
      - 80:80

  data-gateway:
    build:
      context: ../../
      dockerfile: dev-tools/containers/data-gateway/Dockerfile
    image: data-gateway
    container_name: data-gateway
    environment:
      SDS_ACCESS_TOKEN: "${SDS_ACCESS_TOKEN}"
      PROXY_URL: "${PROXY_URL}"
      CONFIG_ENDPOINT: "${CONFIG_ENDPOINT}"
      CLAMAV_SOCKET: "${CLAMAV_SOCKET}"
    tty: true
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    profiles:
      - fuse

volumes:
  postgres-init:
